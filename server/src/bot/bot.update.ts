import { Action, Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';
import { ProductService } from 'src/product/product.service';
import { Context, Scenes, Telegraf } from 'telegraf';
import { BotService } from './bot.service';
import { Logger } from '@nestjs/common';
import * as path from 'path';
import * as fs from 'fs';
import {
    BackButton,
    BreakUpdateButton,
    KeyboardStart,
    UpdateProduct
} from '@app/shared/telegram';

@Update()
export class BotUpdate {
    constructor(
        @InjectBot()
        private readonly bot: Telegraf<Context>,
        private readonly service: BotService,
        private readonly product: ProductService
    ) {}

    @Start()
    async onStart(@Ctx() ctx) {
        const name =
            ctx.message?.from?.first_name ??
            ctx.update.callback_query.from.first_name;

        await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!`, {
            reply_markup: KeyboardStart
        });
    }

    @Action('cancel')
    async getBack(ctx: Scenes.WizardContext) {
        await ctx.answerCbQuery('–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

        if (!ctx?.scene) await ctx.scene?.leave;

        await this.service.leaveButton(ctx);
    }

    @Action('editProduct')
    async updateProduct(@Ctx() ctx: Scenes.SceneContext) {
        ctx.answerCbQuery('–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            show_alert: true,
            cache_time: 500
        });

        await this.service.leaveButton(ctx);

        ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª—å —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            {
                reply_markup: BreakUpdateButton.reply_markup
            }
        );

        ctx.scene.enter('updateProduct');
    }

    @Action('back')
    async backFunction(@Ctx() ctx: Context) {
        ctx.answerCbQuery('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', {
            show_alert: true,
            cache_time: 500
        });

        await this.service.leaveButton(ctx);
    }

    @Action('products')
    async getProducts(@Ctx() ctx: Context) {
        ctx.answerCbQuery('–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≤–∞—Ä—ã –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –Ω–∏–∂–µ');
        const products = await this.product.findAll();

        const message = [];

        products.map(product =>
            message.push(
                `üîó –ê—Ä—Ç–∏–∫—É–ª—å: ${product.article} üì¶ –ù–∞–ª–∏—á–∏–µ: ${product.availability}`
            )
        );

        await ctx.reply(`${message}`, { reply_markup: UpdateProduct });
    }

    @Action('table')
    async getInfoTable(@Ctx() ctx: Context) {
        ctx.answerCbQuery('–¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –Ω–∏–∂–µ!');
        await ctx.reply(
            '–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–µ–ª–∞–π—Ç–µ —ç—Ç–∏ —à–∞–≥–∏: \n\n<b>1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –æ–∫–æ–ª–æ –ø–æ–ª—è –≤–≤–æ–¥–∞.</b> \n<b>2. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx*.</b> \n<b>3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∏ –æ–Ω –Ω–∞—á–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è - –≤–∞–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏.</b> \n\n* –ó–∞–º–µ—Ç–∫–∞, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑ excel –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –Ω–µ–≥–æ.',
            { parse_mode: 'HTML', reply_markup: BackButton }
        );
    }

    @On('document')
    async getXLSXTable(@Ctx() ctx) {
        const fileId = (ctx.message as Message.DocumentMessage).document
            .file_id;
        const userFirstName = ctx.update?.message?.from?.first_name;
        const userId = ctx.update?.message?.from?.id;
        const url = await ctx.telegram.getFileLink(fileId);
        const filePath = path.join(
            process.cwd(),
            `documents/by-${userId}-${userFirstName}.xlsx`
        );
        await this.service.downloadFile(url.href, filePath);
        const jsonDataExcel = await this.service.parseExcel(filePath);
        fs.unlinkSync(filePath);

        try {
            await this.service.saveExcelToDb(jsonDataExcel);
            await ctx.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î');
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î:', error);
            await ctx.reply(
                error.message ||
                    '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –ë–î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
                {
                    parse_mode: 'Markdown'
                }
            );
        }
    }
}
