import { Wizard, Message, WizardStep, Ctx, On, Hears } from 'nestjs-telegraf';
import { ProductService } from 'src/product/product.service';
import { EProduct } from '@app/entities';
import { Scenes } from 'telegraf';

@Wizard('updateProduct')
export class UpdateProductWizard {
    constructor(private readonly product: ProductService) {}

    @WizardStep(1)
    async onSceneEnter(@Ctx() ctx) {
        await ctx.reply('‚úã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞');

        await ctx.wizard.next();
    }

    @Hears('CANCEL')
    @On('callback_query')
    async handleCancel(@Ctx() ctx: Scenes.WizardContext) {
        await ctx.answerCbQuery('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.', {
            show_alert: true,
            cache_time: 60 * 5
        });
        await ctx.scene.leave();
    }

    @On('text')
    @WizardStep(2)
    async onArticulSend(
        @Ctx() ctx: Scenes.WizardContext,
        @Message() msg: { text: string; message_id: string }
    ) {
        const product = await this.product.findByArticul(msg.text);

        if (!product) {
            await ctx.wizard.selectStep(2);
            return '–ù–µ –≤–µ—Ä–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑';
        }

        await ctx.reply(`${this.createConfirmationMessage(product)}`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞–ª–µ–µ', callback_data: 'NEXT' },
                        { text: '‚ùå –í—ã–π—Ç–∏', callback_data: 'CANCEL' }
                    ]
                ]
            }
        });

        ctx.wizard.state['lastUserMessageId'] = msg.message_id;

        ctx.wizard.state['article'] = product.article;
        ctx.wizard.state['id'] = product.id;

        await ctx.wizard.next();
    }

    @On('callback_query')
    @WizardStep(3)
    async onSelectEdit(@Ctx() ctx) {
        const isNextStep = ctx.callbackQuery.data === 'NEXT';

        if (isNextStep) {
            await ctx.answerCbQuery('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
            await ctx.reply('üîß –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', {
                reply_markup: {
                    inline_keyboard: this.getEditOptions(),
                    selective: true
                }
            });

            await ctx.wizard.next();
        }
    }

    @On('callback_query')
    @WizardStep(4)
    async onEdit(@Ctx() ctx) {
        const action = ctx.callbackQuery.data;
        const editFields = this.getEditFields();

        if (editFields[action]) {
            await ctx.answerCbQuery();
            ctx.wizard.state['editField'] = editFields[action];
            await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${editFields[action]}`);

            await ctx.wizard.next();
        }
    }

    @On('text')
    @WizardStep(5)
    async onEditingText(@Ctx() ctx, @Message() msg): Promise<string> {
        ctx.wizard.state['lastUserMessageId'] = msg.message_id;

        const field = ctx.wizard.state['editField'];
        const id = ctx.wizard.state['id'];

        if (!id || !field) {
            await ctx.wizard.selectStep(4);
            return '–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.';
        }

        try {
            await this.product.update(id, { [field]: msg.text });
            await ctx.reply(`–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
        } finally {
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîß –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                            callback_data: 'NEXT'
                        },
                        {
                            text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                            callback_data: 'CANCEL'
                        }
                    ]
                ]
            }
        });

        await ctx.wizard.selectStep(3); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏
    }

    private createConfirmationMessage(product: EProduct): string {
        return `
üì¶ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ç–æ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤—ã –≤—ã–±—Ä–∞–ª–∏:*
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category}
‚úÖ *–ù–∞–ª–∏—á–∏–µ:* ${product.availability}
üåç *–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:* ${product.country}
üé® *–ü–æ–∫—Ä—ã—Ç–∏–µ:* ${product.invoice}
üõ†Ô∏è *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:* ${product.usage}
‚öôÔ∏è *–ü–æ–∫—Ä—ã—Ç–∏–µ:* ${product.plating || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üé® *–û—Ç—Ç–µ–Ω–æ–∫:* ${product.shade}
üìè *–†–∞–∑–º–µ—Ä—ã:* ${product.size}
üíµ *–¶–µ–Ω–∞:* ${product.price} —Ä—É–±.
üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${product.createdAt}
üÜî *–ê—Ä—Ç–∏–∫—É–ª:* ${product.article}
`;
    }

    private getEditOptions(): { text: string; callback_data: string }[][] {
        return [
            [
                { text: 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data: 'EDIT_CATEGORY' },
                { text: '‚úÖ –ù–∞–ª–∏—á–∏–µ', callback_data: 'EDIT_AVAILABILITY' }
            ],
            [
                {
                    text: 'üåç –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è',
                    callback_data: 'EDIT_COUNTRY'
                },
                { text: 'üé® –ü–æ–∫—Ä—ã—Ç–∏–µ', callback_data: 'EDIT_INVOICE' }
            ],
            [
                { text: 'üõ†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', callback_data: 'EDIT_USAGE' },
                { text: '‚öôÔ∏è –ü–æ–∫—Ä—ã—Ç–∏–µ', callback_data: 'EDIT_PLATING' }
            ],
            [
                { text: 'üé® –û—Ç—Ç–µ–Ω–æ–∫', callback_data: 'EDIT_SHADE' },
                { text: 'üìè –†–∞–∑–º–µ—Ä—ã', callback_data: 'EDIT_SIZE' },
                { text: 'üíµ –¶–µ–Ω–∞', callback_data: 'EDIT_PRICE' }
            ],
            [
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'CANCEL' } // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            ]
        ];
    }

    private getEditFields(): { [key: string]: string } {
        return {
            EDIT_CATEGORY: 'category',
            EDIT_AVAILABILITY: 'availability',
            EDIT_COUNTRY: 'country',
            EDIT_INVOICE: 'invoice',
            EDIT_USAGE: 'usage',
            EDIT_PLATING: 'plating',
            EDIT_SHADE: 'shade',
            EDIT_SIZE: 'size',
            EDIT_PRICE: 'price'
        };
    }
}
