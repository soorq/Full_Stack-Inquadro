import { Wizard, Message, WizardStep, Ctx, On, Hears } from 'nestjs-telegraf';
import { ProductService } from 'src/product/product.service';
import { EProduct } from '@app/entities';
import { Scenes } from 'telegraf';

@Wizard('deleteProduct')
export class DeleteProductWizard {
    constructor(private readonly product: ProductService) {}

    @WizardStep(1)
    async onSceneEnter(@Ctx() ctx) {
        await ctx.wizard.next();
        return '‚úã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞';
    }

    @Hears(['CANCEL'])
    async handleCancel(@Ctx() ctx: Scenes.WizardContext) {
        await ctx.answerCbQuery('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.', {
            show_alert: true,
            cache_time: 60 * 5
        });
        await ctx.scene.leave();
    }

    @On('text')
    @WizardStep(2)
    async onArticulSend(
        @Ctx() ctx: Scenes.WizardContext,
        @Message() msg: { text: string }
    ) {
        const product = await this.product.findByArticul(msg.text);

        if (!product) {
            await ctx.scene.reenter();
            return '–ù–µ –≤–µ—Ä–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑';
        }

        ctx.wizard.state['article'] = product.article;
        ctx.wizard.state['id'] = product.id;

        await ctx.reply(`${this.createConfirmationMessage(product)}`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –í—ã–π—Ç–∏', callback_data: 'CANCEL' },
                        { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: 'NEXT' }
                    ]
                ]
            }
        });

        await ctx.wizard.next();
    }

    @On('callback_query')
    @WizardStep(3)
    async onSelectEdit(@Ctx() ctx) {
        const article = ctx.wizard.state['article'];
        const id = ctx.wizard.state['id'];

        const isNext = ctx.callbackQuery.data === 'NEXT';

        if (isNext) {
            try {
                await this.product.delete(id);
                await ctx.answerCbQuery(
                    `‚ùå –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫–ª–æ–º: ${article}.`,
                    { show_alert: true, cache_time: 60 * 5 }
                );
            } catch (e) {
                await ctx.answerCbQuery(
                    `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è`,
                    { show_alert: true, cache_time: 60 * 5 }
                );
            }

            await ctx.scene.leave();
        }
    }

    private createConfirmationMessage(product: EProduct): string {
        return `
üì¶ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ç–æ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤—ã –≤—ã–±—Ä–∞–ª–∏:*
üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category}
‚úÖ *–ù–∞–ª–∏—á–∏–µ:* ${product.availability}
üåç *–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:* ${product.country}
üé® *–ü–æ–∫—Ä—ã—Ç–∏–µ:* ${product.invoice}
üõ†Ô∏è *–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:* ${product.usage}
‚öôÔ∏è *–ü–æ–∫—Ä—ã—Ç–∏–µ:* ${product.plating || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üé® *–û—Ç—Ç–µ–Ω–æ–∫:* ${product.shade}
üìè *–†–∞–∑–º–µ—Ä—ã:* ${product.size}
üíµ *–¶–µ–Ω–∞:* ${product.price} —Ä—É–±.
üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${product.createdAt}
üÜî *–ê—Ä—Ç–∏–∫—É–ª:* ${product.article}
`;
    }
}
