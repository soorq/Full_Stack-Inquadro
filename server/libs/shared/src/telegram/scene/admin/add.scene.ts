import { Wizard, Message, WizardStep, Ctx, On, Action } from 'nestjs-telegraf';
import { AdminService } from 'src/admin/admin.service';
import { Scenes } from 'telegraf';

@Wizard('addAdmin')
export class AddAdminWizard {
    constructor(private readonly admin: AdminService) {}

    @WizardStep(1)
    async onSceneEnter(@Ctx() ctx) {
        await ctx.wizard.next();
        await ctx.reply(
            '‚úã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–π–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'CANCEL' }]
                    ]
                }
            }
        );
    }

    @Action('CANCEL')
    async handleCancel(@Ctx() ctx: Scenes.WizardContext) {
        await ctx.answerCbQuery('–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–æ–±–∞–≤–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤.', {
            show_alert: true,
            cache_time: 60 * 5
        });
        await ctx.scene.leave();
    }

    @On('text')
    @WizardStep(2)
    async onArticulSend(
        @Ctx() ctx: Scenes.WizardContext,
        @Message() msg: { text: string }
    ) {
        const admin = await this.admin.findOne(msg.text);

        if (admin) {
            await ctx.scene.reenter();
            return '–¢–∞–∫–æ–π –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        }

        ctx.wizard.state['telegram_id'] = msg.text;

        await ctx.reply(`${this.createConfirmationMessage(msg.text)}`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úîÔ∏è –í–µ—Ä–Ω–æ', callback_data: 'NEXT' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'CANCEL' }
                    ]
                ]
            }
        });

        ctx.wizard.next();
    }

    @On('callback_query')
    @WizardStep(3)
    async onSelectEdit(@Ctx() ctx) {
        const telegram_id = ctx.wizard.state['telegram_id'];

        try {
            await this.admin.save(telegram_id);
            await ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω: ${telegram_id}.`, {
                show_alert: true,
                cache_time: 60 * 5
            });
        } catch (e) {
            await ctx.answerCbQuery(
                `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è`,
                { show_alert: true, cache_time: 60 * 5 }
            );
        }

        await ctx.scene.leave();
    }

    private createConfirmationMessage(admin: string): string {
        return `
  *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Ç–æ–≥–æ –ª–∏ –∞–¥–º–∏–Ω–∞ –≤—ã–±—Ä–∞–ª–∏:*
üÜî *–¢–µ–ª–µ–≥—Ä–∞–º–º –∞–π–¥–∏:* ${admin}
`;
    }
}
