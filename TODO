SORT
- по доступным - от низких к высоким ценам
- по премиальным - от высоких к низким ценам
- по новым - сортировка по дате создания
- по пулярным - сортировка пока по буквам

FILTERS
- поправить отображения мультиселектов
- поправить обновление query params
#Front-Ui
- доделать верстку на мобилку
- поправить скелетоны продуктов

ORDERS
- доделать логику конфети
- доделать форму отправки
- доделать при выборе способа доставки - город при самостаятельном заказе

CART-FAVORITE
- дописать логику добавления в корзину и избранного 50/50
- доделать карточки вывести фичи на уровень

OTHER
- доделать остальные страницы по типу policy and etc
- доделать кнопку навигации
- адаптировать поиск на мобилках ui


import { useProductStore } from '~&/src/entities/product';
import { OptionGroup } from './product-operation.group';
import { SpecifyQty } from '~&/src/features/qty';
import { useEffect, useState } from 'react';

export const ProductOperation = () => {
    const [selectedSizeId, setSelectedSizeId] = useState<number | undefined>(
        undefined
    );
    const [selectedUsageId, setSelectedUsageId] = useState<number | undefined>(
        undefined
    );
    const [selectedShadeId, setSelectedShadeId] = useState<number | undefined>(
        undefined
    );
    const [qty, setQty] = useState<number>(1);

    const { product_api: product, setCurrentId } = useProductStore(
        state => state
    );

    useEffect(() => {
        if (product && product.size) {
            const sizeOptions = Array.isArray(product.size) ? product.size : [];
            const defaultSize = sizeOptions[0];
            if (defaultSize) {
                setSelectedSizeId(defaultSize.id);
            }
        }
    }, [product]);

    useEffect(() => {
        if (selectedSizeId) {
            setCurrentId(selectedSizeId);
        }
    }, [selectedSizeId, setCurrentId]);

    useEffect(() => {
        if (selectedSizeId && product) {
            const sizeOptions = Array.isArray(product.size) ? product.size : [];
            const usageOptions = Array.isArray(product.usage)
                ? product.usage
                : [];
            const shadeOptions = Array.isArray(product.shade)
                ? product.shade
                : [];

            // Находим все id, связанные с выбранным размером по value
            const selectedSizeValue = sizeOptions.find(
                size => size.id === selectedSizeId
            )?.value;
            const relatedSizeIds = sizeOptions
                .filter(size => size.value === selectedSizeValue)
                .map(size => size.id);

            // Фильтрация usage по найденным id
            const filteredUsageOptions = usageOptions.filter(usage =>
                relatedSizeIds.includes(usage.id)
            );

            if (filteredUsageOptions.length > 0) {
                // Устанавливаем первый usage по умолчанию
                setSelectedUsageId(filteredUsageOptions[0].id);

                // Фильтрация shade по найденным usage
                const filteredShadeOptions = shadeOptions.filter(shade =>
                    filteredUsageOptions.some(
                        usage =>
                            usage.id === selectedUsageId &&
                            shade.id === usage.id
                    )
                );

                if (filteredShadeOptions.length > 0) {
                    // Устанавливаем первый shade по умолчанию
                    setSelectedShadeId(filteredShadeOptions[0].id);
                } else {
                    setSelectedShadeId(undefined);
                }
            } else {
                setSelectedUsageId(undefined);
                setSelectedShadeId(undefined);
            }
        }
    }, [selectedSizeId, product]);

    useEffect(() => {
        if (selectedUsageId && product) {
            const shadeOptions = Array.isArray(product.shade)
                ? product.shade
                : [];
            const usageOptions = Array.isArray(product.usage)
                ? product.usage
                : [];

            // Фильтрация shade по выбранному usage
            const filteredShadeOptions = shadeOptions.filter(shade =>
                usageOptions.some(
                    usage =>
                        usage.id === selectedUsageId && shade.id === usage.id
                )
            );

            if (filteredShadeOptions.length > 0) {
                // Устанавливаем первый shade по умолчанию
                setSelectedShadeId(filteredShadeOptions[0].id);
            } else {
                setSelectedShadeId(undefined);
            }
        }
    }, [selectedUsageId, product]);

    if (!product) return null;

    const sizeOptions = Array.isArray(product.size) ? product.size : [];
    const usageOptions = Array.isArray(product.usage) ? product.usage : [];
    const shadeOptions = Array.isArray(product.shade) ? product.shade : [];

    // Находим все id, связанные с выбранным размером по value
    const selectedSizeValue = sizeOptions.find(
        size => size.id === selectedSizeId
    )?.value;
    const relatedSizeIds = sizeOptions
        .filter(size => size.value === selectedSizeValue)
        .map(size => size.id);

    // Фильтрация usage на основе найденных id
    const filteredUsageOptions = usageOptions.filter(usage =>
        relatedSizeIds.includes(usage.id)
    );

    // Фильтрация shade на основе выбранного usage
    const filteredShadeOptions = selectedUsageId
        ? shadeOptions.filter(shade =>
              filteredUsageOptions.some(
                  usage => usage.id === selectedUsageId && shade.id === usage.id
              )
          )
        : [];


    const handleSizeChange = (id: number) => {
        setSelectedSizeId(id);
        setSelectedUsageId(undefined); // Сброс использования при изменении размера
        setSelectedShadeId(undefined); // Сброс оттенка при изменении размера
    };

    const handleUsageChange = (id: number) => {
        setSelectedUsageId(id);
    };

    const handleShadeChange = (id: number) => {
        setSelectedShadeId(id);
    };

    return (
        <div className="md:flex-col flex gap-1.5 w-full">
            <div className="flex flex-col gap-1.5">
                <div className="bg-secondary rounded-[10px] flex gap-1.5 flex-wrap p-4">
                    <OptionGroup
                        options={sizeOptions}
                        selectedId={selectedSizeId}
                        highlightId={selectedSizeId}
                        onChange={id => handleSizeChange(id)}
                    />
                </div>
                {filteredUsageOptions.length > 0 && (
                    <div className="bg-secondary rounded-[10px] flex gap-1.5 flex-wrap p-4">
                        <OptionGroup
                            options={filteredUsageOptions}
                            selectedId={selectedUsageId}
                            highlightId={selectedUsageId}
                            onChange={id => handleUsageChange(id)}
                        />
                    </div>
                )}
                {filteredShadeOptions.length > 0 && (
                    <div className="bg-secondary rounded-[10px] flex gap-1.5 flex-wrap p-4">
                        <OptionGroup
                            options={filteredShadeOptions}
                            selectedId={selectedShadeId}
                            highlightId={selectedShadeId}
                            onChange={id => handleShadeChange(id)}
                        />
                    </div>
                )}
            </div>

            <SpecifyQty setQty={setQty} withFavorite qty={qty} withCart />
        </div>
    );
};
